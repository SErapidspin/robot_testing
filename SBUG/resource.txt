*** Settings ***

Documentation	A practice resource file for an add to cart test
Library		Selenium2Library



*** Variables ***
${DELAY}			0
${VALID USERNAME}		apang@demacmedia.com
${VALID PASSWORD}		testing123

#Below variables are to be done 
${HOME PAGE}	http://www.snugglebugz.ca
${CLOSE NEWSLETTER BUTTON}	xpath=//div[@id ='newsletter-dropdown']//div[@class='close']
${NEWSLETTER OVERLAY}	xpath=//div[@id='newsletter-dropdown']
${LOGIN URL}	https://www.snugglebugz.ca/customer/account/login
${SIMPLE PRODUCT}	http://www.snugglebugz.ca/dock-a-tot-deluxe-silver-lining.html
${CONFIGURABLE PRODUCT}		http://www.snugglebugz.ca/mesa-car-seat.html
${WISHLIST PAGE}	
${CORRECT USERNAME}	apang+3@demacmedia.com
${CORRECT PASSWORD}	testing123	
${ACCOUNT DASH}		https://www.snugglebugz.ca/customer/account/	
${EMAIL ADDRESS}	apang+robot@demacmedia.com
${REGISTER BUTTON}	xpath=//*[@id="login-form"]/div/div[1]/div[2]/a
${REGISTER URL}		https://www.snugglebugz.ca/customer/account/create/
${ACCOUNT INFORMATION URL}	https://www.snugglebugz.ca/customer/account/edit	
${ADDRESS BOOK URL}	https://www.snugglebugz.ca/customer/address/
${CART URL}		http://www.snugglebugz.ca/checkout/cart/
${LISTING PAGE}		http://www.snugglebugz.ca/just-arrived.html
${SEARCH BAR}		id=search
${GENERAL SEARCH TERM}		stroller
${NEW QUANTITY}		3
${FIRST NAME}		Andrew
${NEW FIRST NAME}	Chris
${LAST NAME}		Pang
${NEW LAST NAME}	Redfield
${TELEPHONE}		1234567890
${NEW TELEPHONE}	9056571111
${STREET}		211 Yonge Street
${NEW STREET}		123 Sesame
${CITY}			Toronto
${NEW CITY}		Montreal
${REGION}		Ontario
${NEW REGION}		Quebec
${ZIP}			M5B1M4
${NEW ZIP}		1a2a3a
${CHECKOUT URL}		https://www.snugglebugz.ca/checkout/onepage/
${CHECKOUT BUTTON}	class=btn-checkout
${PAYMENT GATEWAY}		monerisvault
${BRAND FILTER}		AppleCheeks	
${MAXIMUM PRICE}	999.99
${MINIMUM PRICE}	0.00
${CONFIGURATION}	xpath=//select[contains(@id, 'attribute')]
${CONFIGURATION OPTION}		xpath=//option[contains(text(), 'Black')]	
${QUANTITY}		1
${VALID CREDIT CARD}	5113400993928386
${CREDIT CARD MONTH}	09
${CREDIT CARD YEAR}	2018


#Perhaps the below should be specified in the command line?
${BROWSER}		chrome

*** Keywords ***
Open Browser To Product Page 
	[Arguments]	${PRODUCT PAGE}		${BROWSER}
	Open Browser	${PRODUCT PAGE} 	${BROWSER}		
	Set Selenium Speed	${DELAY}
	Maximize Browser Window
	Location Should Be	${PRODUCT PAGE}

Go To Product Page
	[Arguments]	${PRODUCT PAGE}
	Go to	${PRODUCT PAGE}
	Location Should Be	${PRODUCT PAGE}


Go To Wishlist Page
	[Arguments]	${WISHLIST PAGE}	
	Go To 		${WISHLIST PAGE}
	Location Should Be 	${WISHLIST PAGE}


Configure Option
	[Arguments] 	${DROPDOWN}	${OPTION} 	
	Click Element	${DROPDOWN}
	Wait Until Element Is Visible	${OPTION}
	Click Element	${OPTION}


Configure Quantity
	[Arguments]	${QUANTITY}
	Input Text	id=qty	${QUANTITY}


Press Add Button	
	Click Button  xpath=//button[contains(@title, 'Add to Cart')]

Press Wishlist Button
	Click Button	class=link-wishlist


Go To Cart Page
	[Arguments]	${CART URL}
	Go To		${CART URL}

#To Do
#Checks that the product is in the cart and that its quantity is correct. Done in this way so you can do one without the other
Check Product Was Added To Cart
	[Arguments]	${QUANTITY}	${PRODUCT NAME}
	Check Product Is In Cart	${PRODUCT NAME}
	Check Product Quantity In Cart	${PRODUCT NAME}		${QUANTITY} 

#To Do
#Checks if there's a product in the cart that contains that product name. Assumes user is on the cart page
Check Product Is In Cart
	[Arguments]	${PRODUCT NAME}	
	Element Should Be Visible	xpath=//table[@id= 'shopping-cart-table']//*[@class = 'product-name']//*[contains(text(),'${PRODUCT NAME}')]
	


#Checks if there's a quantity field associated with that product name in the cart. Assumes user is on the cart page
Check Product Quantity In Cart
	[Arguments]	${PRODUCT NAME}		${INTENDED QUANTITY} 
	${ACTUAL QUANTITY}=	Get Value	xpath=//table[@id='shopping-cart-table']//*[@class='product-name']//*[contains(text(), '${PRODUCT NAME}')]/../../..//input[@title = 'Qty']
	Should Be Equal		${ACTUAL QUANTITY}	${INTENDED QUANTITY}

# To Do
# Checks that there was an add to cart confirmation message (if there's supposed to be one) and that the minicart drops down (if its supposed to)
# Wait is 10 seconds
Check Add To Cart Confirmation
	Wait Until Element Is Visible		id=header-cart	10

#To Do
# Travel to the cart page using the minicart link at the top (if there is one)
Travel To Cart Page
# If you just added to the page, there'll be a minicart open already and that'll mess everything up
	Wait Until Element Is Not Visible	id=header-cart	10
	Click Element	xpath=//div[@id='header-minicart-01']
	Wait Until Element Is Visible	xpath=//a[@class='cart-link']	
	Click Element	xpath=//a[@class='cart-link']
	Location Should Be	${CART URL}

#Travels to the checkout page. Assumes that you're on the cart page
Travel To Checkout Page
	Click Element	xpath=//*[contains(@class, "btn-proceed-checkout")]
	Location Should Be	${CHECKOUT URL}

# Close that damned newsletter popup
Close Newsletter Popup
        [Arguments]     ${CLOSE NEWSLETTER BUTTON}  ${NEWSLETTER OVERLAY}
        Wait Until Element Is Visible  ${CLOSE NEWSLETTER BUTTON}  7
        Click Element  ${CLOSE NEWSLETTER BUTTON}
        Wait Until Element Is Not Visible  ${NEWSLETTER OVERLAY}   7
	Unselect Frame

Input Username          [Arguments]  ${username}
        Input Text      id=email  ${username}

Input Password          [Arguments]  ${password}
        Input Text      id=pass  ${password}

Login To Account
	[Arguments]	${USERNAME}	${PASSWORD}
	Input Username  	${USERNAME}
	Input Password  	${PASSWORD}
	Wait Until Element Is Visible	xpath=//*[@id="send2"]
	Click Button	xpath=//*[@id="send2"]

Open Browser To Login Page
        Open Browser  ${LOGIN URL}   ${BROWSER}
        Maximize Browser Window
        Set Selenium Speed  ${DELAY}
        Location Should Be  ${LOGIN URL}

#To Do
Click Register Button
	[Arguments]	${REGISTER BUTTON}
	Wait Until Page Contains Element	${REGISTER BUTTON}	10
	Click Element	${REGISTER BUTTON}
	Location Should Be 	${REGISTER URL}

#To Do
Register Account Credentials
	[Arguments]	${FIRST NAME}	${LAST NAME}	${EMAIL ADDRESS}	${PASSWORD}	 
	Input Text	id=firstname	${FIRST NAME}
	Input Text	id=lastname	${LAST NAME}
	Input Text	id=email_address		${EMAIL ADDRESS}
	Input Text	id=password	${PASSWORD}
	Input Text	id=confirmation		${PASSWORD}
	Click Button	xpath=//form[@id= 'form-validate']//button[@type='submit']

Go To Login Page
        Go To   ${LOGIN URL}
        Location Should Be  ${LOGIN URL}

#To Do
#Assumes the browser is at the edit address page
Change Address
	[Arguments]	${FIRST NAME}	${LAST NAME}	${TELEPHONE}	${STREET}	${CITY}	 ${REGION}	${ZIP}
	Input Text  	id=firstname	${FIRST NAME}
	Input Text	id=lastname	${LAST NAME}
	Input Text	id=telephone	${TELEPHONE}
	Input Text	id=street_1	${STREET}
	Input Text	id=city		${CITY}
	Click Element	xpath=//select[@id='region_id']	
	Click Element	xpath=//select[@id='region_id']/option[text()='${REGION}']
	Input Text	id=zip		${ZIP}
	Click Button	xpath=//*[@title='Save Address']

#To Do
Go To Edit Address Page
	[Arguments]	${ADDRESS BOOK URL}	
	Go To	${ADDRESS BOOK URL} 


	
#To Do
#Under the assumption that the user is on the account dashboard
Travel To Edit Address
	Wait Until Element Is Visible 	xpath=//div[contains(@class,'block-account')]//*[text()='Address Book']
	Click Element	xpath=//div[contains(@class,'block-account')]//*[text()='Address Book']
	Wait Until Element Is Visible	xpath=//a[text() = 'Change Billing Address']	5
	Click Element	xpath=//a[text() = 'Change Billing Address']
	Location Should Contain 	www.snugglebugz.ca/customer/address/edit/id

#To Do
#Checks the address element to see if the parameters are in the address. Assumes that the user 
# is on the account dashboard
Check Account Address Was Changed
	[Arguments]	${FIRST NAME}	${LAST NAME}	${TELEPHONE}	${STREET}	${CITY}		${REGION}	${ZIP}
	Element Should Contain	xpath=//address		${FIRST NAME}
	Element Should Contain	xpath=//address		${LAST NAME}
	Element Should Contain	xpath=//address		${TELEPHONE}
	Element Should Contain	xpath=//address		${STREET}
	Element Should Contain	xpath=//address		${CITY}	
	Element Should Contain	xpath=//address		${REGION}
	Element Should Contain	xpath=//address		${ZIP}

Go To Account Information Page
	Go To	${ACCOUNT INFORMATION URL}
	Location Should Contain		${ACCOUNT INFORMATION URL}


#To Do
# Under the assumption that the user is on the Account Dashboard page
Travel To Account Information Page
	Click Element	xpath=//div[contains(@class,"block-account")]//*[text()="Account Information"]
	Location Should Contain		${ACCOUNT INFORMATION URL}

Change Account Info
	[Arguments]	${FIRST NAME}	${LAST NAME}
	Input Text	id=firstname	${FIRST NAME}
	Input Text	id=lastname	${LAST NAME}
	Click Element	xpath=//span[text() = 'Save']	

#To Do
#Checks the contents of the first and last name fields to see of the values were changed
Check Account Info Was Changed
	[Arguments] 	${FIRST NAME}	${LAST NAME}	
	Go To Account Information Page
	Textfield Value Should Be	id=firstname	${FIRST NAME}
	Textfield Value Should Be	id=lastname	${LAST NAME}

#To Do
Search For Term
	[Arguments]	${SEARCH BAR}	${SEARCH TERM}	
	Click Element	xpath=//a[@id = 'header-search-trigger']/span
	Clear Element Text	${SEARCH BAR}
	Input Text	${SEARCH BAR}	${SEARCH TERM}
	Click Button	xpath=//form[@id='search_mini_form']//button[@type='submit']

#assumes that browser is currently on the product page. Uses Product name and product description and looks for an example of the search term
Check That Product Is Related
	[Arguments]	${SEARCH TERM}
	${PRODUCT NAME}=	Get Text	xpath=//div[@class='product-name']
	${PRODUCT DESCRIPTION}=		Get Text	xpath=//*[contains(@class,'description')]
	${PRODUCT DETAILS}=	Catenate	${PRODUCT NAME}		${PRODUCT DESCRIPTION}
	Log	'Product found: ${PRODUCT NAME}'
	Should Contain	${PRODUCT DETAILS}	${SEARCH TERM}

#To Do
#Gets the name of the first product on the listing page
Get Name Of First Product
	${SPECIFIC NAME} =	Get Text	xpath=//*[@class = 'category-products']//li[contains(@class,"item")]//*[@class = "product-name"]
	[Return]	${SPECIFIC NAME}


#To Do
#Checks to see if the product was at least found on the listing page
Check That Product Is On Listing Page
	[Arguments]	${SEARCH PRODUCT}
	Element Should Be Visible	xpath=//div[@class = "category-products"]//*[@class = 'product-name']/*[contains(text(),'${SEARCH PRODUCT}')]
	

Go To Listing Page
	[Arguments]	${LISTING PAGE}
	Go To	${LISTING PAGE}	
	Location Should Be	${LISTING PAGE}


#Difference between Travel and Go to: Travel tries to go to a location naturally (mouse clicks and hovers), Go To simply goes to URL
#To do:	arguments to click different links in the header nav
#Hard Coded to click the 'Just Arrived' link in the b
Travel To Listing Page
	Click Element	xpath=//nav[@id='nav']//a[text() = "Just Arrived"]
	
 
#To Do
#Sort Listing page by sort argument using the select dropdown. Assumes that you're on the listing page (duh)	
Sort Listing Page 
	[Arguments]	${SORT}
	Click Element	xpath=//*[@class='sort-by']//select
	Click Element	xpath=//*[@class='sort-by']//select/option[contains(text(),'${SORT}')]	

# To Do
# Basically just click the first product on the listing page. Assumes browser is on a listing page
Click First Product
	Click Element	xpath=//div[@class='category-products']//*[@class = 'product-name']/a	

#To Do - Write a function in a different library that will compare strings 
Check Page Is Sorted By Name



#To Do - Write a function in a different library that will compare floats 
Check Page Is Sorted By Price



#Sets the filter by clicking on a brand in the filter bar
Filter Page By Brand
	[Arguments]	${BRAND FILTER}
	Click Link	xpath=//dl[@id="narrow-by-list"]//a[contains(text() ,'${BRAND FILTER}')]

#To Do
#Sets the filter on the category listing page by clicking a link in the filter bar that contains both the maximum and minimum price (hopefully hitting the price filter lol). Assumes that you're on a listing page.
Filter Page By Price
	[Arguments]	${MAXIMUM PRICE}	${MINIMUM PRICE}
#Looks ugly, but the xpath below basically finds a link in the filter bar that contains the maximum and minimum price
	Click Element	xpath=//*[@id='narrow-by-list']//a[.//span[@class ="price" and contains(text(),"${MINIMUM PRICE}")] and .//span[@class ="price" and contains(text(),"${MAXIMUM PRICE}")]]

#To Do
#Gets each of the brands in each product block and then asserts that they all contain the brand that was filtered
Check Page Is Filtered By Brand
	[Arguments]	${BRAND FILTER}
	@{BRAND LIST}=	Get Webelements		xpath=//*[@class='product-info']/*[@class='brand']
	:FOR	${BRAND}	IN	@{BRAND LIST}
	\	${TEXT}=	Get Text	${BRAND}
	\	Should Contain	${BRAND}	${BRAND FILTER}

#To Do
Check Page Is Filtered By Price
	[Arguments]	${MAXIMUM PRICE}	${MINIMUM PRICE}
	@{PRICE LIST}=	Get Webelements		xpath=//*[contains(@id,'product-price-')]
	:FOR	${PRICE}	IN	@{PRICE LIST}
	\	${TEXT}=	Get Text	${PRICE}
	\	${FLOAT}=	Convert To Number	${TEXT.strip('$')}
	\	Should Be True	${FLOAT} > ${MINIMUM PRICE}	Price '${FLOAT}' is lower than minimum price '${MINIMUM PRICE}'!
	\ 	Should Be True	${FLOAT} < ${MAXIMUM PRICE}	Price '${FLOAT}' is higher than maximum price '${MAXIMUM PRICE}!

#To Do
#Basically clicks the remove item button associated with a product name. Assumes the browser is on the cart page
Remove Product From Cart
	[Arguments]	${PRODUCT NAME}
	Wait Until Element Is Visible	xpath=//table[@id='shopping-cart-table']//*[@class='product-name']//*[contains(text(), '${PRODUCT NAME}')]/../../..//*[@title = 'Remove Item']	7
	Click Element	xpath=//table[@id='shopping-cart-table']//*[@class='product-name']//*[contains(text(), '${PRODUCT NAME}')]/../../..//*[@title = 'Remove Item']
	

#To Do 
#Basically just checks the page to see if there's no instance of that product name. Assumes that the browser is on the cart page
Check Product Was Removed From Cart
	[Arguments]	${PRODUCT NAME}
	Element Should Not Contain	xpath=//table[@id='shopping-cart-table']	${PRODUCT NAME}

#To Do
#Changes the number in the quantity field associated with the product name, and then clicks the update quantity button. Assumes that the browser is on the cart page
Change Product Quantity In Cart
	[Arguments]	${PRODUCT NAME} 	${CHANGE QUANTITY}
	Clear Element Text	xpath=//table[@id='shopping-cart-table']//*[@class='product-name']//*[contains(text(), '${PRODUCT NAME}')]/../../..//input[@title='Qty']
	Input Text	xpath=//table[@id='shopping-cart-table']//*[@class='product-name']//*[contains(text(), '${PRODUCT NAME}')]/../../..//input[@title='Qty']		${CHANGE QUANTITY}
	Click Button	xpath=//*[@class = 'btn-update']


Click Login Button
        Click Button    id=send2

User Should Be On Account Dashboard
        Location Should Be  ${ACCOUNT DASH}

Login Should Have Failed
        Location Should Contain		https://www.snugglebugz.ca/customer/account


#To Do
Get Product Name
	${PRODUCT NAME}=	Get Text	xpath=//*[@class='product-name']/span[@class='h1']
	[Return]	${PRODUCT NAME}

Add Simple Product To Cart
	[Arguments]	${QUANTITY}
	Configure Quantity	${QUANTITY}
	Press Add Button

Add Configurable Product To Cart
	[Arguments]	${QUANTITY}	${CONFIGURATION OPTION}
	Configure Option 	${CONFIGURATION}	${CONFIGURATION OPTION}
	Configure Quantity	${QUANTITY}
	Press Add Button

#To Do
#Opens the quickview of the first product on the cart. Assumes browser is on listing page
Open Quickview
	[Arguments]	
	Mouse Over	xpath=//*[@class='product-image']
	Click Element	xpath=//*[@class='quickview']

#Switches to Quickview frame lol
Switch To Quickview Frame
	Select Frame	xpath=//iframe[contains(@src, 'quickview')]

#Switches to default frame. Used to get away from quickview frame
Switch To Default Frame
	Unselect Frame

#To Do
#Gets the product name in the first open quickview. Assumes that you're on the quickview frame 
Get Quickview Product Name
	${PRODUCT NAME}=	Get Text	xpath =//div[@id='quickview-product-shop']//div[@class ='product-name']/h1
	[Return] 	${PRODUCT NAME}

#To Do
#Adds a simple product to the cart from the first open quickview. (must switch to the iframe if there is one). Assumes that browser is on the listing page and that the first quickview is open
Add Simple Product To Cart From Quickview
	[Arguments]	${QUANTITY}	
	Open Quickview
        Switch To Quickview Frame
        Add Simple Product To Cart     ${QUANTITY}
        Unselect Frame

	

#To Do
Add Configurable Product To Cart From Quickview
	[Arguments]	
	

#To Do
Go To Checkout Page
	Go To	${CHECKOUT URL}
	Location Should Be	${CHECKOUT URL}

#To Do
Log In On Checkout Page
	[Arguments]	${USERNAME}	${PASSWORD}
	Input Text	id=login-email	${USERNAME}
	Input Text	id=login-password	${PASSWORD}
	Click Element	xpath=//div[@id='checkout-step-login']//button//span[text()="Log In"]

#To Do
Enter Billing Information
	[Arguments]	${FIRST NAME}	${LAST NAME}	${EMAIL}	${TELEPHONE}	${STREET}	${CITY}		${REGION}	${ZIP}
	Wait Until Element Is Visible	id=checkout-step-billing
	Input Text	id=billing:firstname	${FIRST NAME}
	Input Text	id=billing:lastname	${LAST NAME}
	Input Text	id=billing:email	${EMAIL}
	Input Text	id=billing:postcode	${ZIP}
	Input Text	id=billing:telephone	${TELEPHONE}
	Input Text	id=billing:street1	${STREET}
	Input Text	id=billing:city		${CITY}
	Click Element	id=billing:region_id
	Click Element	xpath=//select[@id= 'billing:region_id']/option[text()='${REGION}']
	Click Element	xpath=//*[@id='billing-buttons-container']//span[text() = 'Continue']

#To Do
Enter Shipping Information
	[Arguments]	${FIRST NAME}	${LAST NAME}	${EMAIL}	${TELEPHONE}	${STREET}	${CITY}		${REGION}	${ZIP}
	Wait Until Element Is Visible	id=checkout-step-shipping
	Input Text	id=shipping:firstname	${FIRST NAME}
	Input Text	id=shipping:lastname	${LAST NAME}
	Input Text	id=shipping:email	${EMAIL}
	Input Text	id=shipping:postcode	${ZIP}
	Input Text	id=shipping:telephone	${TELEPHONE}
	Input Text	id=shipping:city	${CITY}
	Click Element	id=shipping:region_id
	Input Text	xpath=//select[@id='shipping:region_id']/option[text()='${REGION}']
	Click Element	xpath=//*[@id='shipping-buttons-container']//span[text() = 'Continue']

#To Do
#Click a shipping method. Currently hard-coded to clicking the second shipping method, but will change if need be
Enter Shipping Method 
	Wait Until Element Is Visible	id=checkout-step-shipping_method
	Click Element	xpath=(//input[@name='shipping method'])[2]	


#To Do
#Currently clicks the credit cart option. Maybe should split it into 'Enter Credit Card' and 'Enter Paypal'
Enter Payment Information
	[Arguments]	${CREDIT CARD NUMBER}	${CREDIT CARD TYPE}	${CREDIT CARD MONTH}	${CREDIT CARD YEAR}	${CREDIT CARD VERIFICATION}
	Wait Until Element Is Visible	id=checkout-step-payment
	Click Element	 id=p_method_${PAYMENT GATEWAY}
	Click Element	id=${PAYMENT GATEWAY}_cc_type
	Click Element	xpath=//select[@id='${PAYMENT GATEWAY}_cc_type']//option[@value='${CREDIT CARD TYPE}']
	Click Element	id=${PAYMENT GATEWAY}_expiration
	Click Element	xpath=//select[@id='${PAYMENT GATEWAY}_expiration']//option[@value='${CREDIT CARD MONTH}']
	Click Element	id=${PAYMENT GATEWAY}_expiration_yr
	Click Element	//select[@id = '${PAYMENT GATEWAY}_expiration_yr']//option[@value = '${CREDIT CARD YEAR}']
	Input Text	xpath=//select[@id='${PAYMENT GATEWAY}_cc_number']	${CREDIT CARD NUMBER}
	Input Text	xpath=//select[@id='${PAYMENT GATEWAY}_cc_cid']		${CREDIT CARD VERIFICATION}
	Click Button	xpath=//button[@onclick='payment.save()']


#It all comes together. Assumes browser is at the Order Review step of the checkout. 
Place Order
	Click Button	xpath=//button[contains(@class, 'btn-checkout']


#To do: Add Logging, Add to wishlist, various negative testing scenarios
